version: 2.1

commands:
  destroy-environment:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            pid=<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-${pid}
            aws s3 rm s3://udapeople-${pid} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${pid}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://KVdb.io/${KVDB_BUCKET}/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm run migrations:revert
            fi

node_img: &node_img
  docker:
      - image: cimg/node:13.8

jobs:
  build_frontend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: frontend-node-modules
      - run:
          name: Build and Compile Frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-node-modules

  build_backend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Build and Compile Backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-node-modules

  test_frontend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: frontend-node-modules
      - run:
          name: Run Frontend Test
          command: |
            cd frontend
            npm run test

  test_backend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Run Backend Test
          command: |
            cd backend
            npm run test

  scan_frontend:
    <<: *node_img
    steps:
      - checkout
      - run:
          name: Scan Frontend Dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan_backend:
    <<: *node_img
    steps:
      - checkout
      - run:
          name: Scan Backend Dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install image dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend cloud infrastructure
          command: |
            pid=${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${pid} \
              --parameter-overrides ID=${pid} \
              --tags project=udapeople
      - run:
          name: Deploy frontend cloud infrastructure
          command: |
            pid=${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${pid} \
              --parameter-overrides ID=${pid} \
              --tags project=udapeople
      - run:
          name: Fetch and store hostname in ansible inventory file
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            pid=${CIRCLE_WORKFLOW_ID:0:7}
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].{PublicIpAddress: PublicIpAddress, Tags: Tags[?Value=='backend-${pid}']}[?Tags[?Value=='backend-${pid}']].PublicIpAddress" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: [project/.circleci]
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['57:e4:e8:c3:d0:0b:18:b9:75:58:ed:dc:87:fa:18:fe']
      - run: apk add --update tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh
            pip3 install --upgrade awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - run:
          name: Setup node exporter
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -e "ansible_python_interpreter=/usr/bin/python3" -i inventory.txt setup-node-exporter.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Install dependencies - awscli
          command: sudo apt update -y && sudo apt install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            MIGRATION_KEY=migration_${CIRCLE_WORKFLOW_ID:0:7}
            if grep -q 'has been executed successfully' backend/migrations_dump.txt
            then
              curl https://KVdb.io/${KVDB_BUCKET}/${MIGRATION_KEY} -d '1'
            else
              curl https://KVdb.io/${KVDB_BUCKET}/${MIGRATION_KEY} -d '0'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    <<: *node_img
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Install dependencies - awscli
          command: sudo apt update -y && sudo apt install -y awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL=\"${API_URL}\" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            pid=${CIRCLE_WORKFLOW_ID:0:7}
            cd frontend
            npm install
            npm run build
            tar -cvzf artifact-"${pid}".tar.gz dist
            aws s3 sync dist s3://udapeople-${pid} --delete
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['57:e4:e8:c3:d0:0b:18:b9:75:58:ed:dc:87:fa:18:fe']
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Install dependencies - awscli
          command: pip3 install --upgrade awscli
      - run:
          name: Install dependencies - node
          command: |
            apk add --update nodejs npm
            node -v
      - run:
          name: Install dependencies - ansible, openssh
          command: |
            apk add --update ansible openssh
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..

            echo "---- Remove node_modules before archiving, to be installed later using ansible -----"
            rm -rf backend/node_modules

            echo "----- archive folder -----"
            tar -C backend -czvf artifact.tar.gz .

            echo "---- Contents of the inventory.txt file -------"
            cd .circleci/ansible
            cat inventory.txt

            echo "---- Run ansible ----"
            ansible-playbook -e "ansible_python_interpreter=/usr/bin/python3" -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install packages
          command: apk add --update curl tar gzip
      - run:
          name: Install dependencies
          command: pip3 install --upgrade awscli
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Get backend url and perform Backend smoke test
          command: |
            BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            API_URL="http://${BACKEND_IP}:3030"
            echo ${API_URL}
            if curl "${API_URL}/api/status" | grep 'ok'
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep 'Welcome'
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  get-last-workflow-id:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install packages
          command: yum install -y curl
      - run:
          name: Get and Save old workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name=='WorkflowID'].Value" \
              --no-paginate \
              --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            curl https://KVdb.io/${KVDB_BUCKET}/old-workflow-id -d "${OldWorkflowID}"

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Install packages
          command: apk add --update curl
      - run:
          name: Install dependencies
          command: pip3 install --upgrade awscli
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name initialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
          no_output_timeout: 30m
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Display existing stacks
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Get old stack workflow id, and Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl https://KVdb.io/${KVDB_BUCKET}/old-workflow-id)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${CIRCLE_WORKFLOW_ID}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: [build_frontend]
      - test_backend:
          requires: [build_backend]
      - scan_frontend:
          requires: [build_frontend]
      - scan_backend:
          requires: [build_backend]
      - deploy-infrastructure:
          requires: [test_backend, test_frontend, scan_backend, scan_frontend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - get-last-workflow-id:
          requires: [smoke-test]
      - cloudfront-update:
          requires: [get-last-workflow-id]
      - cleanup:
          requires: [cloudfront-update]
