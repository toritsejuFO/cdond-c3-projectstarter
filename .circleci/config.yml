version: 2.1

commands:
  destroy-environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            pid=${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${pid}
            aws s3 rm s3://udapeople-${pid} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${pid}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://KVdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm run migrations:revert
            fi

node_img: &node_img
  docker:
      - image: cimg/node:13.8

jobs:
  build_frontend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: frontend-node-modules
      - run:
          name: Build and Compile Frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-node-modules

  build_backend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Build and Compile Backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-node-modules

  test_frontend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: frontend-node-modules
      - run:
          name: Run Frontend Test
          command: |
            cd frontend
            npm run test

  test_backend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Run Backend Test
          command: |
            cd backend
            npm run test

  scan_frontend:
    <<: *node_img
    steps:
      - checkout
      - run:
          name: Scan Frontend Dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan_backend:
    <<: *node_img
    steps:
      - checkout
      - run:
          name: Scan Backend Dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install image dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend cloud infrastructure
          command: |
            pid=${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${pid} \
              --parameter-overrides ID=${pid} \
              --tags project=udapeople
      - run:
          name: Deploy frontend cloud infrastructure
          command: |
            pid=${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${pid} \
              --parameter-overrides ID=${pid} \
              --tags project=udapeople
      - run:
          name: Fetch and store hostname in ansible inventory file
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: [project/.circleci]
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['57:e4:e8:c3:d0:0b:18:b9:75:58:ed:dc:87:fa:18:fe']
      - run: apk add --update tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh
            pip3 install --upgrade awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Install dependencies - awscli
          command: sudo apt update -y && sudo apt install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            MIGRATION_KEY=migration_${CIRCLE_WORKFLOW_ID:0:7}
            if grep -q 'has been executed successfully' backend/migrations_dump.txt
            then
              curl https://KVdb.io/${KVDB_BUCKET}/${MIGRATION_KEY} -d '1'
            else
              curl https://KVdb.io/${KVDB_BUCKET}/${MIGRATION_KEY} -d '0'
            fi
      - destroy-environment

  deploy-frontend:
    <<: *node_img
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies - awscli
          command: sudo apt update -y && sudo apt install -y awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL=\"${API_URL}\" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            pid=${CIRCLE_WORKFLOW_ID:0:7}
            cd frontend
            npm install
            npm run build
            tar -cvzf artifact-"${pid}".tar.gz dist
            aws s3 sync dist s3://udapeople-${pid} --delete
      - destroy-environment
      - revert-migrations

  deploy-backend:
    <<: *node_img
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['57:e4:e8:c3:d0:0b:18:b9:75:58:ed:dc:87:fa:18:fe']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies - awscli
          command: sudo apt update -y && sudo apt install -y awscli
      - run:
          name: Install dependencies - ansible
          command: |
            python3 --version || python2 --version
            sudo apt update -y && sudo apt install -y ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..

            echo "---- Remove node_modules before archiving, to be installed later using ansible -----"
            rm -rf backend/node_modules

            echo "----- archive folder -----"
            tar -C backend -czvf artifact.tar.gz .

            echo "---- Contents of the inventory.txt file -------"
            cd .circleci/ansible
            cat inventory.txt

            echo "---- Run ansible ----"
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

workflows:
  default:
    jobs:
      # - build_frontend
      # - build_backend
      # - test_frontend:
      #     requires: [build_frontend]
      # - test_backend:
      #     requires: [build_backend]
      # - scan_frontend:
      #     requires: [build_frontend]
      # - scan_backend:
      #     requires: [build_backend]
      - deploy-infrastructure
          # requires: [test_backend, test_frontend, scan_backend, scan_frontend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
