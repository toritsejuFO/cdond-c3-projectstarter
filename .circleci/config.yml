version: 2.1

commands:
  destroy-environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

node_img: &node_img
  docker:
      - image: cimg/node:13.8

jobs:
  build_frontend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: frontend-node-modules
      - run:
          name: Build and Compile Frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-node-modules

  build_backend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Build and Compile Backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-node-modules

  test_frontend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: frontend-node-modules
      - run:
          name: Run Frontend Test
          command: |
            cd frontend
            npm run test

  test_backend:
    <<: *node_img
    steps:
      - checkout
      - restore_cache:
          key: backend-node-modules
      - run:
          name: Run Backend Test
          command: |
            cd backend
            npm run test

  scan_frontend:
    <<: *node_img
    steps:
      - checkout
      - run:
          name: Scan Frontend Dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan_backend:
    <<: *node_img
    steps:
      - checkout
      - run:
          name: Scan Backend Dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create workspace directory
          command: mkdir -p /tmp/workspace
      - run:
          name: Install image dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend cloud infrastructure
          command: |
            pid=${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${pid} \
              --parameter-overrides ID=${pid} \
              --tags project=udapeople
      - run:
          name: Deploy frontend cloud infrastructure
          command: |
            pid=${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${pid} \
              --parameter-overrides ID=${pid} \
              --tags project=udapeople
      - run:
          name: Fetch and store hostname in ansible invetory file
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cp -r .circleci /tmp/workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths: [.circleci]
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['57:e4:e8:c3:d0:0b:18:b9:75:58:ed:dc:87:fa:18:fe']
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: apk add --update ansible openssh
      - run:
          name: Configure server
          command: |
            cd /tmp/workspace/.circleci/ansible
            ansible -i inventory.txt configure-server.yml

workflows:
  default:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: [build_frontend]
      - test_backend:
          requires: [build_backend]
      - scan_frontend:
          requires: [build_frontend]
      - scan_backend:
          requires: [build_backend]
      - deploy-infrastructure:
          requires: [test_backend, test_frontend, scan_backend, scan_frontend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
